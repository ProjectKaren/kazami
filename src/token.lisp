(in-package :cl-user)
(defpackage kazami.token
  (:use :cl)
  (:export :+css-token-pattern+))
(in-package :kazami.token)

(cl-interpol:enable-interpol-syntax)

;;; token macro
(let* ((unicode #?/\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?/)
       (nonascii #?"[^\\0-\\177]")
       (escape #?/${unicode}|\\[^\n\r\f0-9a-f]/)
       (nmstart #?/[_a-z]|${nonascii}|${escape}/)
       (nmchar #?/[_a-z0-9-]|${nonascii}|${escape}/)
       (ident #?/[-]?(${nmstart})(${nmchar})*/)
       (name #?/${nmchar}+/)
       (num #?/[+-]?([0-9]+|[0-9]*\.[0-9]+)(e[+-]?[0-9]+)?/)
       (nl #?/\n|\r\n|\r|\f/)
       (string1 #?/\"([^\n\r\f\\\"]|\\${nl}|${escape})*\"/)
       (string2 #?/\'([^\n\r\f\\']|\\${nl}|${escape})*\'/)
       (string #?/${string1}|${string2}/)
       (badstring1 #?/\"([^\n\r\f\\"]|\\${nl}|${escape})*\\?/)
       (badstring2 #?/\'([^\n\r\f\\']|\\${nl}|${escape})*\\?/)
       (badstring #?/${badstring1}|${badstring2}/)
       (badcomment1 #?r"\/\*[^*]*\*+([^/*][^*]*\*+)*")
       (badcomment2 #?r"\/\*[^*]*(\*+[^/*][^*]*)*")
       (badcomment #?/${badcomment1}|${badcomment2}/)
       (U #?/u|\\0{0,4}(55|75)(\r\n|[ \t\r\n\f])?|\\u/)
       (R #?/r|\\0{0,4}(52|72)(\r\n|[ \t\r\n\f])?|\\r/)
       (L #?/l|\\0{0,4}(4c|6c)(\r\n|[ \t\r\n\f])?|\\l/)
       (w #?/[ \t\r\n\f]*/)
       (baduri1 #?/${U}${R}${L}\(${w}([!#$%&*-~]|${nonascii}|${escape})*${w}/)
       (baduri2 #?/${U}${R}${L}\(${w}${string}${w}/)
       (baduri3 #?/${U}${R}${L}\(${w}${badstring}/)
       (baduri #?/${baduri1}|${baduri2}|${baduri3}/))

  ;;; token pattern
  (defparameter <ident> #?/${ident}/)
  (defparameter <atkeyword> #?/@${ident}/)
  (defparameter <string> #?/${string}/)
  (defparameter <bad-string> #?/${badstring}/)
  (defparameter <bad-uri> #?/${baduri}/)
  (defparameter <bad-comment> #?/${badcomment}/)
  (defparameter <hash> #?/#${name}/)
  (defparameter <number> #?/${num}/)
  (defparameter <percentage> #?/${num}%/)
  (defparameter <dimension> #?/${num}${ident}/)
  (defparameter <uri> #?/${U}${R}${L}\(${w}${string}${w}\)|${U}${R}${L}\(${w}([!#$%&*-\[\]-~]|${nonascii}|${escape})*${w}\)/)
  (defparameter <unicode-range> #?/u\+[?]{1,6}|u\+[0-9a-f]{1}[?]{0,5}|u\+[0-9a-f]{2}[?]{0,4}|u\+[0-9a-f]{3}[?]{0,3}|u\+[0-9a-f]{4}[?]{0,2}|u\+[0-9a-f]{5}[?]{0,1}|u\+[0-9a-f]{6}|u\+[0-9a-f]{1,6}-[0-9a-f]{1,6}/)
  (defparameter <cdo> #?/<!--/)
  (defparameter <cdc> #?/-->/)
  (defparameter <colon> #?/:/)
  (defparameter <semicolon> #?/;/)
  (defparameter <bstart> #?/\{/)
  (defparameter <bend> #?/\}/)
  (defparameter <pstart> #?/\(/)
  (defparameter <pend> #?/\)/)
  (defparameter <bbstart> #?/\[/)
  (defparameter <bbend> #?/\]/)
  (defparameter <s> #?/[ \t\r\n\f]+/)
  (defparameter <comment> #?r"\/\*[^*]*\*+([^/*][^*]*\*+)*\/")
  (defparameter <function> #?/${ident}\(/)
  (defparameter <includes> #?/~=/)
  (defparameter <dashmatch> #?/\|=/))

(defparameter +css-token-pattern+
  '((:ident . <ident>)
    (:atkeyword . <atkeyword>)
    (:string . <string>)
    (:bad-string . <bad-string>)
    (:bad-uri . <bad-uri>)
    (:bad-comment . <bad-comment>)
    (:hash . <hash>)
    (:number . <number>)
    (:percentage . <percentage>)
    (:dimension . <dimension>)
    (:uri . <uri>)
    (:unicode-range . <unicode-range>)
    (:cdo . <cdo>)
    (:cdc . <cdc>)
    (:colon . <colon>)
    (:semicolon . <semicolon>)
    (:bstart . <bstart>)
    (:bend . <bend>)
    (:pstart . <pstart>)
    (:pend . <pend>)
    (:bbstart . <bbstart>)
    (:bbend . <bbend>)
    (:s . <s>)
    (:comment . <comment>)
    (:function . <function>)
    (:includes . <includes>)
    (:dashmatch . <dashmatch>)))